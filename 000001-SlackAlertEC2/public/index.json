[
{
	"uri": "//localhost:1313/",
	"title": "Slack Alert EC2",
	"tags": [],
	"description": "",
	"content": "Monitor CPU and memory of EC2 with AWS Lambda, CloudWatch and Slack Overview In this lab, you\u0026rsquo;ll learn how to monitor EC2 instances for high CPU utilization or full disk usage and send alerts to a Slack channel using AWS CloudWatch and AWS Lambda.\nContent Introduction Preparation Create Cloud Watch Service Create Lambda Function Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/4-createlambdafunction/4.1-import-layer/",
	"title": "Import Layer",
	"tags": [],
	"description": "",
	"content": "Use python library To install library to use on lambda function, you need use Layers feature to upload library which get from Linux environment and ziped, if don\u0026rsquo;t have more time to get this, download here Select Layer -\u0026gt; Create Layer Fill bellow info to create layer "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "This architecture leverages the power of AWS CloudWatch, AWS Lambda, and Slack to create a seamless, automated monitoring and alerting system. The solution is designed to continuously monitor key performance metrics such as CPU utilization and disk usage on Amazon EC2 instances. When predefined thresholds are breached, indicating potential issues such as high CPU load or nearly full disk space, the system automatically triggers alerts.\nTogether, these services form an automated, serverless alerting pipeline:\nCloudWatch Alarms continuously monitor EC2 instances for high CPU usage and disk space utilization. When a threshold is breached, the CloudWatch alarm triggers a Lambda function. The Lambda function processes the alarm event and sends a formatted notification to a specified Slack channel using a webhook. "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/",
	"title": "Preparing VPC and EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create a VPC with public subnet and EC2 instance. You can follow this tutorial to create "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-createiamrole/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create IAM Role In this step, we will proceed to create IAM Role. In this IAM Role, the policy AWSLambdaBasicExecutionRole and CloudWatchReadOnlyAccess will be assigned, this is the policy that allows the Lambda to communicate with the CloudWatch.\nGo to IAM service administration interface In the left navigation bar, click Roles. Click Create role. In the Search box, enter AWSLambdaBasicExecutionRole and CloudWatchReadOnlyAccess then press Enter to search for this policy. Click the policy AmazonSSMManagedInstanceCore. Click Next: Tags. Click Next: Review. Name the Role LambdaCloudWatchSlackRole in Role Name Click Create Role . "
},
{
	"uri": "//localhost:1313/4-createlambdafunction/4.2-create-lambda-function/",
	"title": "Create Lambda Function",
	"tags": [],
	"description": "",
	"content": " Create new function Fill bellow infomation Add library Add follow code to send alert to slack import json\rimport boto3\rimport requests\rSLACK_WEBHOOK_URL = \u0026#34;https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\u0026#34; # Replace with your Slack Webhook URL\rdef lambda_handler(event, context):\r# Extract CloudWatch alarm details\ralarm_name = event[\u0026#39;alarmData\u0026#39;][\u0026#39;alarmName\u0026#39;]\rstate = event[\u0026#39;alarmData\u0026#39;][\u0026#39;state\u0026#39;][\u0026#39;value\u0026#39;]\rreason = event[\u0026#39;alarmData\u0026#39;][\u0026#39;state\u0026#39;][\u0026#39;reason\u0026#39;]\r# Prepare the message\rmessage = f\u0026#34;CloudWatch Alarm: {alarm_name} is in state {state}. Reason: {reason}\u0026#34;\r# Send the message to Slack\rslack_data = {\r\u0026#39;text\u0026#39;: message\r}\rresponse = requests.post(\rSLACK_WEBHOOK_URL,\rdata=json.dumps(slack_data),\rheaders={\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;}\r)\rif response.status_code != 200:\rraise ValueError(f\u0026#34;Request to Slack returned an error {response.status_code}, the response is:\\n{response.text}\u0026#34;)\rreturn {\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;body\u0026#39;: json.dumps(\u0026#39;Alert sent to Slack!\u0026#39;)\r} "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC Content Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "//localhost:1313/3-getslackwebhook/",
	"title": "Get slack webhook link",
	"tags": [],
	"description": "",
	"content": " Create new App Active Incoming Webhooks Select Slack Channel to notify Get webhook link "
},
{
	"uri": "//localhost:1313/4-createlambdafunction/",
	"title": "Create Lambda Function",
	"tags": [],
	"description": "",
	"content": "In this section, we will proceed to create lambda function.\nContent: Import Layer Create Lambda Function "
},
{
	"uri": "//localhost:1313/5-createcloudwatchservice/",
	"title": "Create CloudWatch Service",
	"tags": [],
	"description": "",
	"content": "In this step, we will create CloudWatch service to Monitor EC2 CPU.\nSelect Service CloudWatch Create Alarm Choose metric is EC2 was created and metric named CPUUtilization Setup param Add lambda function Enter name and create alarm Assign lambda trigger permission for alarm Fill bellow infomation "
},
{
	"uri": "//localhost:1313/6-test/",
	"title": "Test",
	"tags": [],
	"description": "",
	"content": " SSH to EC2 instance Create python script to virtual high CPU # high_cpu_usage.py\rimport multiprocessing\rdef cpu_stress():\rwhile True:\rpass # Infinite loop to keep the CPU busy\rif __name__ == \u0026#34;__main__\u0026#34;:\rprint(\u0026#34;Starting high CPU usage simulation...\u0026#34;)\r# Create as many processes as there are CPU cores to maximize CPU utilization\rcpu_count = multiprocessing.cpu_count()\rprint(f\u0026#34;Number of CPU cores: {cpu_count}\u0026#34;)\r# Create and start a process for each CPU core\rprocesses = []\rfor _ in range(cpu_count):\rprocess = multiprocessing.Process(target=cpu_stress)\rprocesses.append(process)\rprocess.start()\r# Keep the main script running while the child processes are executing\rfor process in processes:\rprocess.join() Run script 5. Result: "
},
{
	"uri": "//localhost:1313/7-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nDelete EC2 instance Go to EC2 service management console\nClick Instances. Select both Public Linux Instance and Private Windows Instance instances. Click Instance state. Click Terminate instance, then click Terminate to confirm. Go to IAM service management console\nClick Roles. In the search box, enter SSM. Click to select SSM-Role. Click Delete, then enter the role name SSM-Role and click Delete to delete the role. Click Users. Click on user Portfwd. Click Delete, then enter the user name Portfwd and click Delete to delete the user. Delete S3 bucket Access System Manager - Session Manager service management console.\nClick the Preferences tab. Click Edit. Scroll down. In the section S3 logging. Uncheck Enable to disable logging. Scroll down. Click Save. Go to S3 service management console\nClick on the S3 bucket we created for this lab. (Example: lab-fcj-bucket-0001 ) Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket. Delete VPC Endpoints Go to VPC service management console Click Endpoints. Select the 4 endpoints we created for the lab including SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. In the confirm box, enter delete.\nClick Delete to proceed with deleting endpoints. Click the refresh icon, check that all endpoints have been deleted before proceeding to the next step.\nDelete VPC Go to VPC service management console\nClick Your VPCs. Click on Lab VPC. Click Actions. Click Delete VPC. In the confirm box, enter delete to confirm, click Delete to delete Lab VPC and related resources.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]